from django.db import models
from django.contrib.auth.models import User

from django.utils import timezone


class UserProfile(models.Model):
    """
    Model representing user profiles in the application.

    Fields:
    - user (OneToOneField): One-to-one relationship with the built-in User model.
    - profile_picture (ImageField, optional): Profile picture of the user.
    - assigned_tasks (PositiveIntegerField, default=0): Number of assigned tasks.
    - completed_tasks (PositiveIntegerField, default=0): Number of completed tasks.
    - position (CharField): User's position, choices: "Pracownik" or "Szef" or "Admin".

    Methods:
    - __str__: Returns the string representation of the user profile.

    """

    POSITION_CHOICES = [
        ('Pracownik', 'Pracownik'),
        ('Szef', 'Szef'),
        ('Admin', 'Admin'),
    ]
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    profile_picture = models.ImageField(upload_to='profile_pictures', blank=True, null=True)
    assigned_tasks = models.PositiveIntegerField(default=0)
    completed_tasks = models.PositiveIntegerField(default=0)
    position = models.CharField(max_length=10, choices=POSITION_CHOICES, default='Pracownik')

    def __str__(self):
        return self.user.username


class Task(models.Model):
    """
    Model representing tasks assigned to users.

    Fields:
    - name (CharField): Name of the task.
    - description (TextField): Description of the task.
    - status (CharField): Status of the task, available choices defined in STATUS_CHOICES.
    - assigned_to (ForeignKey): User profile to whom the task is assigned.
    - is_important (BooleanField): Indicates if the task is important.
    - task_date (DateField): Date of the task.
    - creation_time (DateTimeField): Date and time when the task was created.

    Methods:
    - __str__: Returns the string representation of the task.

    """

    STATUS_CHOICES = [
        ('Do zrobienia', 'Do zrobienia'),
        ('Zrobione', 'Zrobione'),
    ]

    name = models.CharField(max_length=255)
    description = models.TextField()
    status = models.CharField(max_length=12, choices=STATUS_CHOICES, default='Do zrobienia')
    assigned_to = models.ForeignKey(UserProfile, on_delete=models.CASCADE)
    is_important = models.BooleanField(default=False)
    task_date = models.DateField(default=timezone.now)
    creation_time = models.DateTimeField(default=timezone.now)

    def __str__(self):
        return f"{self.name} - {self.task_date}"


class Delivery(models.Model):
    """
    Model representing delivery information.

    Fields:
    - delivery_company (CharField): Name of the delivery company, available choices defined in DELIVERY_COMPANY_CHOICES.
    - form (CharField): Form of the delivery, available choices defined in FORM_CHOICES.
    - quantity (IntegerField): Quantity of items.
    - description (TextField): Description of the delivery.
    - status (CharField): Status of the delivery, available choices defined in STATUS_CHOICES.
    - delivery_date (DateField): Date of the delivery.
    - creation_time (DateTimeField): Date and time when delivery task was created.
    - generated_context (TextField): Additional context generated by application.

    Methods:
    - __str__: Returns the string representation of the delivery.

    """

    DELIVERY_COMPANY_CHOICES = [
        ('InPost', 'InPost'),
        ('DPD', 'DPD'),
        ('GLS', 'GLS'),
        ('Poczta', 'Poczta'),
        ('Paczkomat', 'Paczkomat'),
        ('DHL', 'DHL'),
        ('Media Expert', 'Media Expert'),
    ]

    FORM_CHOICES = [
        ('Paczka', 'Paczka'),
        ('Paleta', 'Paleta'),
    ]

    STATUS_CHOICES = [
        ('W drodze', 'W drodze'),
        ('Odebrana', 'Odebrana'),
        ('Nie dostarczona', 'Nie dostarczona'),
    ]

    delivery_company = models.CharField(max_length=15, choices=DELIVERY_COMPANY_CHOICES)
    form = models.CharField(max_length=10, choices=FORM_CHOICES, default='Paczka')
    quantity = models.PositiveIntegerField()
    description = models.TextField()
    status = models.CharField(max_length=15, choices=STATUS_CHOICES, default='W drodze')
    delivery_date = models.DateField(default=timezone.now)
    creation_time = models.DateTimeField(default=timezone.now)
    generated_context = models.CharField(max_length=255, blank=True, null=True)

    def __str__(self):
        return f"{self.delivery_company} - {self.delivery_date}"


class Day(models.Model):
    """
    Model representing work day information.

    Fields:
    - end_of_work_hour (TimeField): The time when work ends.
    - date (DateField): The date of the work day.

    Methods:
    - __str__: Returns the string representation of the work day.

    """
    end_of_work_hour = models.TimeField(null=False, blank=False)
    day_date = models.DateField(default=timezone.now, unique=True)

    def __str__(self):
        return f"{self.day_date} - {self.end_of_work_hour}"


class Return(models.Model):
    """
    Model representing return information.

    Fields:
    - name (CharField): Name of the return.
    - product_list (TextField): List of products for the return.
    - status (CharField): Status of the return, available choices defined in STATUS_CHOICES.
    - return_date (DateField): Date when the return should be prepared.
    - creation_time (DateTimeField): Date and time when the task was created.

    Methods:
    - __str__: Returns the string representation of the return.

    """
    STATUS_CHOICES = [
        ('Do spakowania', 'Do spakowania'),
        ('Przygotowany', 'Przygotowany'),
        ('Odebrany', 'Odebrany'),
    ]

    name = models.CharField(max_length=100)
    description = models.TextField()
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Do spakowania')
    return_date = models.DateField(default=timezone.now)
    creation_time = models.DateTimeField(default=timezone.now)
    # Nowe pola
    receiving_company = models.CharField(max_length=50)
    notice = models.CharField(max_length=50)
    wholesale = models.CharField(max_length=50)
    notes = models.TextField()
    package_quantity = models.PositiveIntegerField(default=1)

    def __str__(self):
        return f"{self.name} - {self.return_date}"


class OrderItem(models.Model):
    """
    Model representing an item to be ordered by the company.

    Fields:
    - name (CharField): Name of the item.
    - description (TextField): Description of the item.
    - status (CharField): Status of the order item, available choices defined in STATUS_CHOICES.
    - creation_time (DateTimeField): Date and time when the order item was created.
    - created_by (User): The user who created this item.
    """

    STATUS_CHOICES = [
        ('Do zamówienia', 'Do zamówienia'),
        ('Zamówione', 'Zamówione'),
        ('Niedostępne', 'Niedostępne'),
    ]

    name = models.CharField(max_length=100)
    description = models.TextField()
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Do zamówienia')
    creation_time = models.DateTimeField(default=timezone.now)
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)

    def __str__(self):
        return f"Order Item: {self.name}"


class StockItem(models.Model):
    """
    Model representing an item in the inventory.

    Fields:
    - dimensions (str): Dimensions of the item.
    - usage (str): Usage or application of the item.
    - quantity (int): Quantity of the item in the inventory.
    - created_by (User): The user who created this inventory item.
    """

    dimensions = models.CharField(max_length=150, unique=True)
    usage = models.TextField()
    quantity = models.PositiveIntegerField()
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)

    def __str__(self):
        return f"Stock Item: {self.dimensions}"


class Notification(models.Model):
    """
    Model representing notifications for various types of activities in the system.

    Fields:
    - model_name  (CharField): The type of activity related to the notification, available choices defined in NAME_CHOICES.
    - model_id  (IntegerField): The ID of the related model.
    - description (TextField): A text description of the notification.
    - read_by (ManyToManyField): Users who have marked the notification as read.
    - creation_time (DateTimeField): Date and time when the notification was created.
    - notify_for (CharField): The target of the notification, available choices defined in NOTIFY_CHOICES.
    - made_by (User): The user who created the notification.
    """

    NAME_CHOICES = [
        ('Godzina', 'Godzina'),
        ('Zadanie', 'Zadanie'),
        ('Dostawa', 'Dostawa'),
        ('Zwrot', 'Zwrot'),
        ('Zamówienie', 'Zamówienie'),
        ('Magazyn', 'Magazyn'),
    ]

    STATUS_CHOICES = [
        ('Przeczytane', 'Przeczytane'),
        ('Nieprzeczytane', 'Nieprzeczytane'),
    ]

    NOTIFY_CHOICES = [
        ('Pracownik', 'Pracownik'),
        ('Other', 'Other'),
    ]

    model_name = models.CharField(max_length=150, choices=NAME_CHOICES)
    model_destiantion = models.CharField(max_length=150)
    model_id = models.PositiveIntegerField()
    description = models.TextField()
    read_by = models.ManyToManyField(User, related_name='read_notifications')
    creation_time = models.DateTimeField(default=timezone.now)
    notify_for = models.CharField(max_length=20, choices=NOTIFY_CHOICES)
    made_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)

    def __str__(self):
        return f"Notification: {self.model_name} - {self.creation_time.date()}"
